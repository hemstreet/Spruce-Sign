{
  "name": "rpi-ws2801",
  "version": "0.0.3",
  "description": "A node.js library to control a WS2801 RGB LED stripe via SPI with your Raspberry Pi",
  "main": "rpi-ws2801.js",
  "dependencies": {
    "microtime": "*"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Jorgen-VikingGod/node-rpi-ws2801.git"
  },
  "keywords": [
    "raspberry",
    "pi",
    "raspi",
    "rpi",
    "leddriver",
    "led",
    "rgb",
    "WS2801",
    "spi",
    "pwm"
  ],
  "author": {
    "name": "Jürgen Skrotzky"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Jorgen-VikingGod/node-rpi-ws2801/issues"
  },
  "homepage": "https://github.com/Jorgen-VikingGod/node-rpi-ws2801",
  "readme": "rpi-ws2801\n==========\n\nThis is a **node.js** library to control a **WS2801** RGB LED stripe via **SPI** with your **Raspberry Pi**.\n\nI wrote this to control a RGB LED stripe using the **WS2801** with my **Raspberry Pi**.\nThis should also work with other SPI devices.\n\n### installation\n```sh\nnpm install rpi-ws2801\n```\n\nModule is registered to npm as [rpi-ws2801](https://npmjs.org/package/rpi-ws2801)\n\n### initialization\n```js\nvar leds = require(\"rpi-ws2801\");\n// connecting to SPI\nleds.connect(32); // number of LEDs\n```\nparameters:\n* the `number of LEDs` your RGB LED stripe has (32, 60, …)\n* (optional) the name of the SPI device (if different to `/dev/spidev0.0`)\n* (optional) the `gamma` correction value (1, 2.5, …)\n\n### disconnect from SPI\n```js\nleds.disconnect();\n```\n\n### send stored buffer to SPI\n```js\nleds.update();\n```\nThis command sends all stored or set colors to SPI.\n\n### fill complete stripe with one color\n```js\nleds.fill(0xFF, 255, 0x00);\n```\nparameters:\n* red value (0 to 255) or (0x00 to 0xFF)\n* green value (0 to 255) or (0x00 to 0xFF)\n* blue value (0 to 255) or (0x00 to 0xFF)\n\nThis example sets the complete stripe (all LEDs) to color yellow (r: 255, g: 255, b: 0).\n\n### set LED color by array\n```js\nleds.setColor(0, [255,0,0]);  // set LED1 to red\n```\nparameters:\n* set `led index` from (0 to `number of LEDs` -1)\n* set `color array[red, green, blue]` with value (0 to 255)\n\nThis example sets the `LED` 0 (first LED) to red.\n\n### set LED color by percentage value\n```js\nleds.setChannelPower(0, 0.5);\n```\nparameters:\n* set `channel index` from (0 to `number of channels` - 1, `number of channels` = 3 * `number of LEDs`)\n* set `percentage` from (0 to 1)\n\nThis example sets the `channel` 0 (by default the first red channel) to 50%.\n\n### sending the values to your driver\n```js\nleds.setRGB(0, '#FF0000');    // set LED1 to red\n```\nparameters:\n* set `led index` from (0 to `number of LEDs` -1)\n* set `hex color` with web like hex color string.\n\nThis example sets the `LED` 0 (first LED) to red.\n\n### example\n```js\nvar leds = require('rpi-ws2801');\n\n// connecting to Raspberry Pi SPI\nleds.connect(32); // assign number of WS2801 LEDs\n  \n// set all colors to yellow\nconsole.log(\"fill all yellow\");\n// fill(r, g, b)\n// r, g, b: value as hex (0x00 = 0, 0xFF = 255, 0x7F = 127)\nleds.fill(0xFF, 255, 0x00);\n  \n// after 2 seconds set first 6 LEDs to (red, green, blue, red, green, blue)\nsetTimeout(function(){\n  console.log(\"red green blue red green blue\");\n  // setRGB(ledIndex, hexColor);\n  // ledIndex: 0 = LED1, 1 = LED2, …\n  // hexColor: '#FF0000' = red, '#00FF00' = green, ...\n  leds.setRGB(0, '#FF0000');    // set LED1 to red\n  leds.setRGB(1, '#00FF00');    // set LED2 to green\n  leds.setRGB(2, '#0000FF');    // set LED3 to blue\n \n  // setColor(ledIndex, color);\n  // ledIndex: 0 = LED1, 1 = LED2, …\n  // color: array[red, green, blue] = [255,0,0] = red, [0,255,0] = green\n  leds.setColor(3, [255,0,0]);  // set LED4 to red\n  leds.setColor(4, [0,255,0]);  // set LED5 to green\n  leds.setColor(5, [0,0,255]);  // set LED6 to blue\n  \n  // send all set colors to SPI via update();\n  leds.update();\n}, 2000);\n```\n\nWhen running this example the LED stripe will first fill all LEDs with yellow color. After 2 seconds it sets the color of the first 6 LEDs to (red, green, blue, red, green, blue).\n\n### additional commands\nInvert all color values.\n```js\nleds.invert();\n```\n\nReverse the order of LEDs (begin on start of stripe ot end of stripe).\n```js\nleds.reverse();\n```\n\nClear complete LED stripe (fill with black)\n```js\nleds.clear();\n```\n\nGet channel count\n```js\nleds.getChannelCount();\n```\n\nDefine a new RGB order (if first LED is blue instead of red).\n```js\nleds.setColorIndex(2, 1, 0);\n```\nparameters:\n* set `red channel index` from (0, 1 or 2)\n* set `green channel index` from (0, 1 or 2)\n* set `blue channel index` from (0, 1 or 2)\n\nThis example sets the RGB order to address first the blue than the green and at last the red color channel. Red: 2, green. 1, blue: 0 => blue, green, red. Default is red: 0, green: 1, blue: 2 => red, green, blue.\n\n\n\nthx @ [Frederic Worm](https://github.com/fjw) for the initial idea of creating this library.\n\n\n### wiring the Raspberry Pi\n\nConnect your Pi like this to the LED driver:\n\n| Raspberry Pi | led driver |\n|:------------:|:----------:|\n| GND | GND |\n| 5V or 3.3V (or external) | input V+ |\n| SCLK | input CLK |\n| MOSI | input DIN |\n| CE0  | input LAT |\n\nConnect `/OE` on the LED driver to `GND` or to a GPIO of your choice (you can quickly turn off all LEDs by using a GPIO).\n\nOr use this [Raspberry Pi Bridge](https://github.com/hackerspaceshop/RaspberryPI_WS2801_Bridge) from [http://www.hackerspaceshop.com/](http://www.hackerspaceshop.com/raspberrypi-things/raspberrypi-ws2801.html)\n\n**I am not responsible for any damages to your hardware. Use this at your own risk.**\n\n",
  "readmeFilename": "README.md",
  "_id": "rpi-ws2801@0.0.3",
  "dist": {
    "shasum": "c794f8a1f555bdc60793872f50c6f5784a6c24ff",
    "tarball": "http://registry.npmjs.org/rpi-ws2801/-/rpi-ws2801-0.0.3.tgz"
  },
  "_from": "rpi-ws2801@latest",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "jorgen-vikinggod",
    "email": "JorgenVikingGod@gmail.com"
  },
  "maintainers": [
    {
      "name": "jorgen-vikinggod",
      "email": "JorgenVikingGod@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "c794f8a1f555bdc60793872f50c6f5784a6c24ff",
  "_resolved": "https://registry.npmjs.org/rpi-ws2801/-/rpi-ws2801-0.0.3.tgz"
}
